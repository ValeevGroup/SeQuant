A{a1;i1} B{i1;i2} + (A{a1;i1} B{i1;i3}) C{i3;i2}

=================================================
Plain Text
=================================================
Declare index i_1
Declare index i_2
Declare index i_3
Declare index a_1

Declare tensor A[a_1, i_1]
Declare tensor B[i_1, i_3]
Declare tensor C[i_3, i_2]
Declare tensor I[a_1, i_2]
Declare tensor I2[a_1, i_3]

Create I[a_1, i_2] and initialize to zero
Create I2[a_1, i_3] and initialize to zero
Load A[a_1, i_1]
Load B[i_1, i_3]
Compute I2[a_1, i_3] += A[a_1, i_1] B[i_1, i_3]
Unload B[i_1, i_3]
Unload A[a_1, i_1]
Load C[i_3, i_2]
Compute I[a_1, i_2] += I2[a_1, i_3] C[i_3, i_2]
Unload C[i_3, i_2]
Unload I2[a_1, i_3]
Load A[a_1, i_1]
Load B[i_1, i_2]
Compute I[a_1, i_2] += A[a_1, i_1] B[i_1, i_2]
Unload B[i_1, i_2]
Unload A[a_1, i_1]
Persist I[a_1, i_2]

=================================================
Julia (TensorOperations)
=================================================
I_vo = zeros(Float64, nv, nocc)
I2_vo = zeros(Float64, nv, nocc)
A_vo = deserialize("A_vo.jlbin")
B_oo = deserialize("B_oo.jlbin")
@tensor I2_vo[ a_1, i_3 ] += A_vo[ a_1, i_1 ] * B_oo[ i_1, i_3 ]
B_oo = nothing
A_vo = nothing
C_oo = deserialize("C_oo.jlbin")
@tensor I_vo[ a_1, i_2 ] += I2_vo[ a_1, i_3 ] * C_oo[ i_3, i_2 ]
C_oo = nothing
I2_vo = nothing
A_vo = deserialize("A_vo.jlbin")
B_oo = deserialize("B_oo.jlbin")
@tensor I_vo[ a_1, i_2 ] += A_vo[ a_1, i_1 ] * B_oo[ i_1, i_2 ]
B_oo = nothing
A_vo = nothing
return I_vo

=================================================
Julia (TensorKit)
=================================================
I_vo = TensorMap(zeros(Float64, nv, nocc), ℝ^nv, ℝ^nocc)
I2_vo = TensorMap(zeros(Float64, nv, nocc), ℝ^nv, ℝ^nocc)
A_vo = TensorMap(deserialize("A_vo.jlbin"), ℝ^nv, ℝ^nocc)
B_oo = TensorMap(deserialize("B_oo.jlbin"), ℝ^nocc, ℝ^nocc)
@tensor I2_vo[ a_1, i_3 ] += A_vo[ a_1, i_1 ] * B_oo[ i_1, i_3 ]
B_oo = nothing
A_vo = nothing
C_oo = TensorMap(deserialize("C_oo.jlbin"), ℝ^nocc, ℝ^nocc)
@tensor I_vo[ a_1, i_2 ] += I2_vo[ a_1, i_3 ] * C_oo[ i_3, i_2 ]
C_oo = nothing
I2_vo = nothing
A_vo = TensorMap(deserialize("A_vo.jlbin"), ℝ^nv, ℝ^nocc)
B_oo = TensorMap(deserialize("B_oo.jlbin"), ℝ^nocc, ℝ^nocc)
@tensor I_vo[ a_1, i_2 ] += A_vo[ a_1, i_1 ] * B_oo[ i_1, i_2 ]
B_oo = nothing
A_vo = nothing
return I_vo

=================================================
Julia (ITensor)
=================================================
i_1 = Index(nocc, "i_1")
i_2 = Index(nocc, "i_2")
i_3 = Index(nocc, "i_3")
a_1 = Index(nv, "a_1")

I_vo = ITensor(zeros(Float64, nv, nocc), a_1, i_2)
I2_vo = ITensor(zeros(Float64, nv, nocc), a_1, i_3)
A_vo = ITensor(deserialize("A_vo.jlbin"), a_1, i_1)
B_oo = ITensor(deserialize("B_oo.jlbin"), i_1, i_3)
I2_vo += A_vo * B_oo
B_oo = nothing
A_vo = nothing
C_oo = ITensor(deserialize("C_oo.jlbin"), i_3, i_2)
I_vo += I2_vo * C_oo
C_oo = nothing
I2_vo = nothing
A_vo = ITensor(deserialize("A_vo.jlbin"), a_1, i_1)
B_oo = ITensor(deserialize("B_oo.jlbin"), i_1, i_2)
I_vo += A_vo * B_oo
B_oo = nothing
A_vo = nothing
return I_vo

=================================================
