option(SEQUANT_BUILD_DOCS "Build SeQuant documentation using Doxygen and Sphinx" OFF)
add_feature_info(BUILD_DOCS SEQUANT_BUILD_DOCS "Build SeQuant documentation. Doxygen and Sphinx are required.")

if (SEQUANT_BUILD_DOCS)
    # Main documentation targets
    add_custom_target_subproject(sequant doc)

    # Find Python for Sphinx dependencies
    find_package(Python 3.9 COMPONENTS Interpreter REQUIRED)

    option(SEQUANT_GENERATE_API_DOCS "Use Doxygen to generate API docs" ON)

    if (SEQUANT_GENERATE_API_DOCS)
        find_package(Doxygen 1.9.2 REQUIRED)

        set(SEQUANT_DOXYGEN_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/.doxygen")
        set(SEQUANT_DOXYGEN_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/.doxygen")

        file(REAL_PATH "${SEQUANT_DOXYGEN_SOURCE_DIR}" SEQUANT_DOXYGEN_SOURCE_DIR)
        file(REAL_PATH "${SEQUANT_DOXYGEN_OUTPUT_DIR}" SEQUANT_DOXYGEN_OUTPUT_DIR)

        file(MAKE_DIRECTORY "${SEQUANT_DOXYGEN_OUTPUT_DIR}")

        # Configure Doxyfile
        configure_file(
            ${SEQUANT_DOXYGEN_SOURCE_DIR}/Doxyfile.in
            ${SEQUANT_DOXYGEN_OUTPUT_DIR}/Doxyfile @ONLY
        )

        doxygen_add_docs(
            doxygen-sequant
            COMMENT "Generating API documentation via Doxygen"
            CONFIG_FILE "${SEQUANT_DOXYGEN_OUTPUT_DIR}/Doxyfile"
        )
    endif()


    # Ensure the config file installed via sphinx-cmake pip package can be found
    if ("${Python_EXECUTABLE}" MATCHES "(.+)/bin/python[^/]*")
        list(APPEND CMAKE_PREFIX_PATH "${CMAKE_MATCH_1}")
    endif()


    set(SEQUANT_SPHINX_DOCS_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
    set(SEQUANT_SPHINX_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/.sphinx")
    set(SEQUANT_SPHINX_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/.sphinx")
    set(SEQUANT_SPHINX_HTML_DIR ${CMAKE_CURRENT_BINARY_DIR}/html)

    # Directories need to exist in order for REAL_PATH to work properly
    file(MAKE_DIRECTORY "${SEQUANT_SPHINX_BUILD_DIR}")
    file(MAKE_DIRECTORY "${SEQUANT_SPHINX_HTML_DIR}")

    file(REAL_PATH "${SEQUANT_SPHINX_DOCS_DIR}" SEQUANT_SPHINX_DOCS_DIR)
    file(REAL_PATH "${SEQUANT_SPHINX_SOURCE_DIR}" SEQUANT_SPHINX_SOURCE_DIR)
    file(REAL_PATH "${SEQUANT_SPHINX_BUILD_DIR}" SEQUANT_SPHINX_BUILD_DIR)
    file(REAL_PATH "${SEQUANT_SPHINX_HTML_DIR}" SEQUANT_SPHINX_HTML_DIR)

    set(SEQUANT_SPHINX_API_DOCS_DIR "${SEQUANT_SPHINX_DOCS_DIR}/api")
    if (EXISTS "${SEQUANT_SPHINX_API_DOCS_DIR}")
        # Delete the reST files for autogenerated Doxygen docs as we want
        # to avoid keeping any stale files and also, if the user disables
        # Doxygen, we want those docs to be gone.
        file(REMOVE_RECURSE "${SEQUANT_SPHINX_API_DOCS_DIR}")
    endif()


    # Check required Python modules from requirements.txt
    file(STRINGS ${SEQUANT_SPHINX_SOURCE_DIR}/requirements.txt SEQUANT_SPHINX_RAW_MODULES)

    set(SEQUANT_SPHINX_PYTHON_MODULES "")
    set(MODULE_SKIP_CHECK_REGEX "^(sphinx-cmake|sphinx-design)$")
    foreach (module ${SEQUANT_SPHINX_RAW_MODULES})
        string(REGEX REPLACE "#.*" "" module_clean ${module})  # Remove comments
        string(STRIP ${module_clean} module_clean)  # Remove whitespace
        if (NOT "${module_clean}" STREQUAL "" AND NOT "${module_clean}" MATCHES "${MODULE_SKIP_CHECK_REGEX}")
            list(APPEND SEQUANT_SPHINX_PYTHON_MODULES ${module_clean})
        endif ()
    endforeach ()

    set(SEQUANT_SPHINX_MISSING_MODULES "")
    foreach(module ${SEQUANT_SPHINX_PYTHON_MODULES})
        execute_process(
                COMMAND ${Python_EXECUTABLE} -c "import ${module}"
                RESULT_VARIABLE module_result
                ERROR_QUIET
        )
        if(NOT module_result EQUAL 0)
            list(APPEND SEQUANT_SPHINX_MISSING_MODULES ${module})
        endif()
    endforeach()

    if (SEQUANT_SPHINX_MISSING_MODULES)
        message(FATAL_ERROR
                "The following Python modules required for Sphinx documentation are missing:\n"
                "  ${SEQUANT_SPHINX_MISSING_MODULES}\n"
                "Run the following command to install them:\n"
                "  '${Python_EXECUTABLE} -m pip install -r ${CMAKE_CURRENT_SOURCE_DIR}/.sphinx/requirements.txt'\n"
        )
    endif ()


    # Find Sphinx for documentation generation
    find_package(Sphinx REQUIRED)


    if (SEQUANT_GENERATE_API_DOCS)
        set(SEQUANT_SPHINX_DEPENDENCIES
            "DEPENDS" "doxygen-sequant"
        )
        set(SEQUANT_SPHINX_EXTRA_EXTENSIONS "'breathe','exhale',")
        set(SEQUANT_SPHINX_BREATHE_PROJECTS "breathe_projects = {\"SeQuant\": \"${SEQUANT_DOXYGEN_OUTPUT_DIR}/xml\"}")
    endif()


    # Configure Sphinx conf.py
    string(TIMESTAMP CURRENT_YEAR "%Y")
    configure_file(
            ${SEQUANT_SPHINX_SOURCE_DIR}/conf.py.in
            ${SEQUANT_SPHINX_BUILD_DIR}/conf.py @ONLY
    )


    sphinx_add_docs(
        sphinx-sequant
        COMMENT "Generating HTML documentation via Sphinx"
        WORKING_DIRECTORY "${SEQUANT_SPHINX_BUILD_DIR}"
        BUILDER html
        SOURCE_DIRECTORY "${SEQUANT_SPHINX_DOCS_DIR}"
        CONFIG_DIRECTORY "${SEQUANT_SPHINX_BUILD_DIR}"
        OUTPUT_DIRECTORY "${SEQUANT_SPHINX_HTML_DIR}"
        ${SEQUANT_SPHINX_DEPENDENCIES}
        FRESH_ENV
    )

    # Add Sphinx to main documentation target
    add_dependencies(doc-sequant sphinx-sequant)

    # `html` is a standard GNU  target: https://www.gnu.org/prep/standards/html_node/Standard-Targets.html#Standard-Targets
    add_custom_target_subproject(sequant html DEPENDS doc-sequant)
endif()

add_subdirectory(examples)
