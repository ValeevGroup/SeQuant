
.. _program_listing_file_SeQuant_core_utility_tensor.hpp:

Program Listing for File tensor.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_SeQuant_core_utility_tensor.hpp>` (``SeQuant/core/utility/tensor.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef SEQUANT_UTILITY_TENSOR_HPP
   #define SEQUANT_UTILITY_TENSOR_HPP
   
   #include <SeQuant/core/expressions/tensor.hpp>
   #include <SeQuant/core/index.hpp>
   #include <SeQuant/core/space.hpp>
   #include <SeQuant/core/utility/macros.hpp>
   
   #include <functional>
   
   namespace sequant {
   
   template <template <class> class Comparator, template <class> class Selector,
             bool fallback>
   struct TensorBlockComparator {
     auto operator()(const Tensor &lhs, const Tensor &rhs) const {
       if (lhs.label() != rhs.label()) {
         Comparator<decltype(lhs.label())> cmp;
         return cmp(lhs.label(), rhs.label());
       }
   
       if (lhs.num_slots() != rhs.num_slots()) {
         Comparator<decltype(lhs.num_slots())> cmp;
         return cmp(lhs.num_slots(), rhs.num_slots());
       }
   
       if (lhs.num_indices() != rhs.num_indices()) {
         Comparator<decltype(lhs.num_indices())> cmp;
         return cmp(lhs.num_indices(), rhs.num_indices());
       }
   
       auto &&lhs_indices = lhs.indices();
       auto &&rhs_indices = rhs.indices();
   
       Comparator<IndexSpace> cmp;
       Selector<IndexSpace> selector;
   
       for (auto lhs_it = lhs_indices.begin(), rhs_it = rhs_indices.begin();
            lhs_it != lhs_indices.end(); ++lhs_it, ++rhs_it) {
         SEQUANT_ASSERT(rhs_it != rhs_indices.end());
   
         const IndexSpace &left = lhs_it->space();
         const IndexSpace &right = rhs_it->space();
   
         if (selector(left, right)) {
           return cmp(left, right);
         }
       }
   
       return fallback;
     }
   
     bool operator()(const Expr &lhs, const Expr &rhs) const {
       if (lhs.is<Tensor>() && rhs.is<Tensor>()) {
         return (*this)(lhs.as<Tensor>(), rhs.as<Tensor>());
       }
   
       Comparator cmp;
   
       return cmp(lhs, rhs);
     }
   
     bool operator()(const ExprPtr &lhs, const ExprPtr &rhs) const {
       return (*this)(*lhs, *rhs);
     }
   };
   
   using TensorBlockEqualComparator =
       TensorBlockComparator<std::equal_to, std::not_equal_to, true>;
   using TensorBlockLessThanComparator =
       TensorBlockComparator<std::less, std::not_equal_to, false>;
   
   }  // namespace sequant
   
   #endif  // SEQUANT_UTILITY_TENSOR_HPP
